students
students <-
exit()
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
}
# Call the function with the student vector as an argument.
for (x in students) {
print(x)
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students) {
print(x)
}
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students) {
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students) {
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(x)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in class) {
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(x)
# Call the function with the student vector as an argument.
roll_call(x)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in class) {
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(x)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students) {
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(x)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students) {
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(x)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class) {
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class) {
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
print (sample(33,3))
print(student)
}
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class) {
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
print (sample(33,3))
print(student)
}
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
print (sample(33,3))
print(student)
}
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
print (sample(33,3))
print(student)
}
}
# Call the function with the student vector as an argument.
locker_combinations(student)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class) {
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
print (sample(33,3))
print(student)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class) {
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
combination <- sample(33,3)
print (combination)
print(student)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class) {
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
combination <- sample(33,3)
print(student)
print (combination)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (sub string)  that holds the second letter for each student.
second_letter <- substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (second_letter == 'e'){
print(student)
combination <- sample(33:66,3)
print(combination)
}
}
install.packages("dplyr")
library(dplyr)
# Simple vectors
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
print(months)
print(precipitation)
# Assign names to a vector
# Assign months to precipitation as names
names(precipitation) <- months
# Display precipitation
print(precipitation)
# Display names of precipitation
print(names(precipitation))
# Access a single member of precipitation by its name
mar_precipitation <- precipitation["Mar"]
print(mar_precipitation)
# Summary of data
# Display summary data of precipitation
summary(precipitation)
# Store the results in a vector.
precipitation_summary <- summary(precipitation)
# Access features of a summary
precipitation_summary["Min."]
precipitation_summary["Mean"]
# Use pipe operators to express a sequence of operations
precipitation %>% summary()
# Use double brackets to access only the value
precipitation_summary[["Max."]]
# Standard deviation
# Display the standard deviation
sd(precipitation)
# Round SD to two digits
stdev <- sd(precipitation)
round(stdev, 2)
# Standard deviation and round using the pipe operator
precipitation %>% sd()
3.141592653 %>% round(2)
# A few more methods
# Determine the length of a vector
length(precipitation)
# Display the sum of a vector
yearly_precipitation <- sum(precipitation)
yearly_precipitation
# The same operations, this time using pipes
precipitation %>% length()
yearly_precipitation2 <- precipitation %>% sum()
print(yearly_precipitation2)
setwd("~/Desktop/UCB/GitHub/MechaCar_Statistical_Analysis")
library(tidyverse)
Mecha_Car_table <- read.csv('MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
View(Mecha_Car_table)
library(tidyverse)
Mecha_Car_table <- read.csv('MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
View(Mecha_Car_table)
?lm()
mecha_car_lm <- lm(formula = vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, data = Mecha_Car_table)
View(mecha_car_lm)
summary(mecha_car_lm)
mecha_car_lm <- lm(formula = vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, data = Mecha_Car_table)
mecha_car_lm <- lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg,data=Mecha_Car_table) #generate multiple linear regression model
mecha_car_lm
summary(mecha_car_lm) #generate summary
mecha_car_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=Mecha_Car_table) #generate multiple linear regression model
mecha_car_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=Mecha_Car_table) #generate multiple linear regression model
mecha_car_lm
summary(mecha_car_lm) #generate summary
Suspension_Coil_table <- read.csv('Suspension_Coil.csv',check.names = F,stringsAsFactors = F)
View(Suspension_Coil_table)
total_summary <- Suspension_Coil_table %>% group_by(PSI) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=variance(PSI),SD==sd(PSI) .groups = 'keep') #create summary table with multiple columns
total_summary <- Suspension_Coil_table %>% group_by(PSI) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=variance(PSI),SD=sd(PSI) .groups = 'keep') #create summary table with multiple columns
total_summary <- Suspension_Coil_table %>% group_by(PSI) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI) .groups = 'keep') #create summary table with multiple columns
total_summary <- Suspension_Coil_table %>% group_by(PSI) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI)) #create summary table with multiple columns
View(total_summary)
total_summary <- Suspension_Coil_table %>% group_by(PSI) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI) .groups = 'keep') #create summary table
total_summary <- Suspension_Coil_table %>% group_by(PSI) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI) .groups = 'keep') #create summary table
total_summary <- Suspension_Coil_table %>% group_by(PSI) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI)) #create summary table
View(total_summary)
total_summary <- Suspension_Coil_table %>% summarize(Mean=mean(PSI),Median=median(PSI))
total_summary <- Suspension_Coil_table %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI)) #create total summary table
lot_summary <- Suspension_Coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create lot summary table
View(lot_summary)
?t.test()
t.test(mecha_coil$PSI,mu=1500)
t.test(Mecha_Car_table$PSI,mu=1500)
t_test <- t.test(Mecha_Car_table$PSI,mu=1500)
t.test(Mecha_Car_table$PSI, mu=1500)
View(Mecha_Car_table)
Mecha_Car_table<−lapply(Mecha_Car_table$PSI,as.numeric)
Mecha_Car_table <- lapply(Mecha_Car_table$PSI,as.numeric)
t_test <- t.test(Mecha_Car_table$PSI,mu=1500)
Mecha_Car_table <- lapply(Mecha_Car_table$PSI,as.numeric)
t_test <- t.test(Mecha_Car_table$PSI,mu=1500)
t.test(Mecha_Car_table$PSI, mu=1500)
t.test(Mecha_Car_table$PSI, mu=1500)
Mecha_Car_table <- read.csv('MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
View(Mecha_Car_table)
t.test(Suspension_Coil_table$PSI, mu=1500)
t.test(subset(Suspension_Coil_table,Manufacturing_Lot=="Lot1")$PSI,mu = 1500)
t.test(subset(Suspension_Coil_table,Manufacturing_Lot=="Lot2")$PSI,mu = 1500)
t.test(subset(Suspension_Coil_table,Manufacturing_Lot=="Lot3")$PSI,mu = 1500)
